package com.marginallyclever.makelangelo.turtle;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import com.marginallyclever.makelangelo.makeart.turtlegenerator.Generator_Text;
import com.marginallyclever.makelangelo.turtle.Turtle;

public class GeneratorTextTest {

    private Generator_Text generator;

    @Before
    public void setUp() {
        generator = new Generator_Text();
    }

    // Test the generate() method
    @Test
    public void testGenerate() {
        // Set up initial message and font size
        generator.setMessage("Hello World");
        generator.setSize(20);

        // Trigger the generate method
        generator.generate();

        // Check if the turtle is created correctly based on the input
        Turtle turtle = new Turtle();
        assertNotNull(turtle); // Checking if a Turtle object is created
    }

    @Test
    public void testEmptyMessageGenerate() {
        // Set an empty message
        generator.setMessage("");

        // Trigger the generate method
        generator.generate();

        // Since the message is empty, the turtle should not perform any drawing
        Turtle turtle = new Turtle();
        assertNotNull(turtle); // Checking if a Turtle object is created
    }

    // Test the setFont() method
    @Test
    public void testSetFontWithinBounds() {
        // Assuming fontNames array is not empty
        String[] fontNames = generator.getFontNames();
        assertTrue(fontNames.length > 0); // There should be at least one font

        generator.setFont(0);  // First font
        assertEquals(0, generator.getLastFont());

        generator.setFont(fontNames.length - 1);  // Last font
        assertEquals(fontNames.length - 1, generator.getLastFont());
    }

    @Test
    public void testSetFontOutOfBounds() {
        String[] fontNames = generator.getFontNames();
        assertTrue(fontNames.length > 0);

        // Setting font with an index below 0 should default to 0
        generator.setFont(-1);
        assertEquals(0, generator.getLastFont());

        // Setting font with an index above the length should default to the last index
        generator.setFont(fontNames.length + 1);
        assertEquals(fontNames.length - 1, generator.getLastFont());
    }

    // Test the setSize() method
    @Test
    public void testSetSizeWithinBounds() {
        generator.setSize(20);
        assertEquals(20, generator.getLastSize());

        generator.setSize(100);
        assertEquals(100, generator.getLastSize());
    }

    @Test
    public void testSetSizeBelowMinimum() {
        // When size is set to less than 1, it should default to 1
        generator.setSize(0);
        assertEquals(1, generator.getLastSize());

        generator.setSize(-5);
        assertEquals(1, generator.getLastSize());
    }

    // Test the textFindCharsPerLine() method




    // Test the setMessage() method
    @Test
    public void testSetMessage() {
        String message = "Test Message";
        generator.setMessage(message);
        assertEquals(message, generator.getLastMessage());
    }

    @Test
    public void testSetEmptyMessage() {
        generator.setMessage("");
        assertEquals("", generator.getLastMessage());
    }

    @Test
    public void testSetNullMessage() {
        generator.setMessage(null);  // Null input should be handled gracefully
        assertNull(generator.getLastMessage());
    }

    // Test the writeBeautifulMessage() method





}


